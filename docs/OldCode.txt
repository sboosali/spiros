{ nixpkgs  ? <nixpkgs>
, overlays ? []
, config   ? {}

           # ^ (these options (above) affect only « pkgs » (below).)

, musl     ? false
           # ^ if true, « musl » as the C Library (via « nixpkgs.pkgsMusl »).
           #   if false, « glibc » as the C Library (via « nixpkgs.pkgs »).

, pkgs     ? ( let ps = (import nixpkgs { inherit overlays config; });
               in if   musl
                  then ps.pkgs
                  else ps.pkgsMusl
             )

           # ^ 

, compiler ? "ghc863"

           # ^ the haskell compiler. GHC 8.6.3 (by default).

, test     ? false
, bench    ? false
, docs     ? false

           # ^ build the « test:_ » and/or « benchmark:_ » components,
           #   and/or build Haddocks.

, strip    ? true

           # ^ enable "executable stripping".

... }:







/* #if !defined(HS_BASE_FEATURE_MACROS_H) */
/* #define HS_BASE_FEATURE_MACROS_H       */

/* #if !defined(MIN_VERSION_base) */
/* #error MIN_VERSION_base macro not defined */
/* #endif */

#ifndef MIN_VERSION_GLASGOW_HASKELL
#define MIN_VERSION_GLASGOW_HASKELL(x,y,z1,z2) 0
#endif

#ifndef MIN_VERSION_base
#define MIN_VERSION_base(x,y,z) 0
#endif

/* NOTE `ghc-7.10` introduced `MIN_VERSION_GLASGOW_HASKELL`. */

#define HAVE_APPLICATIVE_MONAD                  MIN_VERSION_base(4,8,0)

#define HAVE_FOLDABLE_TRAVERSABLE_IN_PRELUDE    MIN_VERSION_base(4,8,0)

#define HAVE_MONOID_IN_PRELUDE                  MIN_VERSION_base(4,8,0)

#define HAVE_NATURAL_IN_BASE                    MIN_VERSION_base(4,8,0)

#define HAVE_SEMIGROUP_IN_BASE                  MIN_VERSION_base(4,9,0)

#define HAVE_MONAD_FAIL                         MIN_VERSION_base(4,9,0)

/* #endif */




module Prelude.Spiros.Reexports

 ( module X -- re-eXports
 , module Base
#if !HAS_MONAD_FAIL
 , module Prelude.Spiros.Reexports
#endif
 )
where

#include <sboo-base-feature-macros.h>

--------------------------------------------------
--------------------------------------------------

#ifdef HAS_MONAD_FAIL
import "base" Control.Monad.Fail                     as X (MonadFail(..))
#endif







static = import ./static {};






 shell.nix
 
arguments@{...}: 

(import ./nix/shell.nix) arguments









	$(Cabal) new-install $(CabalOptions) --overwrite-policy=always -fstatic "exe:example-sprios"

	example-sprios --help

	ldd `which example-sprios`








	$(Cabal) new-run $(CabalOptions) -fstatic "example-sprios --help"

	ldd `which example-sprios`











nix-cabal-static:

	$(NixBuild)  -A "cabal.static"  "$(NixDirectory)"  --out-link ./result-cabal

	@echo -e "\n========================================\n"

	tree "./result-cabal"

	@echo -e "\n========================================\n"

	cat "./result-cabal/*.project"

	@echo -e "\n========================================\n"























--  -*- mode: cabal; buffer-read-only: nil -*-  vim:set rw: 

--------------------------------------------------
-- Projects --------------------------------------
--------------------------------------------------

packages: /home/sboo/haskell/spiros/spiros

--------------------------------------------------
-- Statically-Linked Executables
--------------------------------------------------

static: True

-- « static »
-- "Roll this and all dependent libraries into a combined .a archive. This uses GHCs -staticlib flag, which is avaiable for iOS and with GHC 8.4 and later for other platforms as well."

shared: False

-- « shared »
-- "Build shared library. This implies a separate compiler run to generate position independent code as required on most platforms."

--------------------------------------------------

profiling: False

executable-dynamic: False

-- « executable-dynamic »
-- "Link executables dynamically. The executable’s library dependencies should be built as shared objects. This implies shared: True unless shared: False is explicitly specified."

split-objs: True

executable-stripping: True

-- « executable-stripping »
-- "Use the GHC -split-objs feature when building the library. This reduces the final size of the executables that use the library by allowing them to link with only the bits that they use rather than the entire library. The downside is that building the library takes longer and uses considerably more memory."

--------------------------------------------------

flags: +static

--------------------------------------------------

package *

  ----------------------------

  ld-options:

    -fPIC

    -static
    -pthread

    -L/nix/store/03rrsz3svcl89m04hzcvqbbjrbszsb36-gmp-6.1.2-x86_64-unknown-linux-musl/lib
    -L/nix/store/azfycl51sidsd1qm9pr46zi4dwbkj9l7-glibc-2.27-x86_64-unknown-linux-musl-static/lib
    -L/nix/store/bp7gyx43lsp7yxdwf5ghikzhd9dq6m72-zlib-1.2.11-x86_64-unknown-linux-musl-static/lib

  ----------------------------

  cc-options:

    -fPIC

  ----------------------------

  ghc-options:

    -fPIC

  ----------------------------

-- ^ the « package * » stanza applies to all packages,
-- both local (internal / project) packages
-- and rempte (external / dependency) packages

--------------------------------------------------
-- Settings --------------------------------------
--------------------------------------------------

-- nix: False

verbose: 2
         -- « 1 » by default.

jobs: 4
      -- « $ncpus » by default.

--------------------------------------------------

deterministic: True
relocatable:   True

--------------------------------------------------

tests: False

--------------------------------------------------
-- Compiler --------------------------------------
--------------------------------------------------

with-compiler: /home/sboo/.nix-profile/bin/ghc-8.6.3

--------------------------------------------------
-- Repositories ----------------------------------
-------------------------------------------------

repository stackage-lts-13.7
  url: https://www.stackage.org/lts-13.7

--------------------------------------------------
-- Notes -----------------------------------------
--------------------------------------------------
-- 
-- 
-- 
--------------------------------------------------



















##################################################
{ systemPackages
, haskellPackages
, haskellUtilities

, static
}:

##################################################
let
#------------------------------------------------#

staticLibraries = {

  gmp   = systemPackages.gmp6.override { withStatic = true; };

  glibc = systemPackages.glibc.static;

  zlib  = systemPackages.zlib.static;

};

#------------------------------------------------#

newAttributes =

 // (lib.optionalAttrs (static != null)
          {
            enableStaticLibraries = static;
            
            enableSharedExecutables = (! static);
            enableSharedLibraries   = (! static);
          }
   ) ;

#------------------------------------------------#

configureFlags =

    -optl=-L${staticLibraries.gmp}/lib
    -optl=-L${staticLibraries.glibc}/lib
    -optl=-L${staticLibraries.zlib}/lib

#------------------------------------------------#
in
##################################################
oldAttributes: {

  # extraLibraries = oldDerivation.extraLibraries ++ (with static; [ gmp zlib ]);

  # extraLibraries = oldDerivation.extraLibraries ++ (with systemPackages; [ fltk ]);

}
##################################################
























instance Show ParseError where

  -- | @show \@'ParseError' ≡ 'displayParseError'@

  showsPrec precedence = showParen (precedence >= 11) (displayed ++)
    where

    displayed = (displayParseErrorWith (def :: ParseErrorConfig))

  -- | @show \@'ParseError' ≡ 'displayParseError'@

  show = displayParseErrorWith (def :: ParseErrorConfig)
























  ("Prelude.Spiros.Utilities Prelude.Spiros.Print Prelude.Spiros.Parse"
   ++ ""
  )



















##################################################
{ ...
}:

##################################################
rec {

  verbose = 2;
  jobs    = 4;

  nix           = false;
  deterministic = true;
  relocatable   = true;
  strip         = true;

  test          = false;
  benchmark     = false;
  documentation = false;

  lts      = "13.7";
  # ^ Stackage LTS version.

  compiler = ~/.nix-profile/bin/ghc-8.6.3;
  # ^ GHC executable path.
  # * should work with the stackage snapshot (i.e. « config.lts »).
  # * must be built with « -fPIC » (i.e. the « ghc » itself).

  libraries = { pkgs }: with pkgs; [

  ];

}
##################################################




















#------------------------------------------------#

toCabalFor = type:

  if   type == "bool"
  then self.bool

  else

  if   type == "int"
  then self.int

  else

  if   type == "list"
  then self.list

  else

  if   type == "path"
  then self.path

  else

  if   type == "string"
  then self.string

  else null;


















whenM :: (Monad m) => m Bool -> m () -> m ()
whenM check action = do

  b <- check

  if   b
  then action
  else nothing

















































































































































