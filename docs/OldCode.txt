{ nixpkgs  ? <nixpkgs>
, overlays ? []
, config   ? {}

           # ^ (these options (above) affect only « pkgs » (below).)

, musl     ? false
           # ^ if true, « musl » as the C Library (via « nixpkgs.pkgsMusl »).
           #   if false, « glibc » as the C Library (via « nixpkgs.pkgs »).

, pkgs     ? ( let ps = (import nixpkgs { inherit overlays config; });
               in if   musl
                  then ps.pkgs
                  else ps.pkgsMusl
             )

           # ^ 

, compiler ? "ghc863"

           # ^ the haskell compiler. GHC 8.6.3 (by default).

, test     ? false
, bench    ? false
, docs     ? false

           # ^ build the « test:_ » and/or « benchmark:_ » components,
           #   and/or build Haddocks.

, strip    ? true

           # ^ enable "executable stripping".

... }:







/* #if !defined(HS_BASE_FEATURE_MACROS_H) */
/* #define HS_BASE_FEATURE_MACROS_H       */

/* #if !defined(MIN_VERSION_base) */
/* #error MIN_VERSION_base macro not defined */
/* #endif */

#ifndef MIN_VERSION_GLASGOW_HASKELL
#define MIN_VERSION_GLASGOW_HASKELL(x,y,z1,z2) 0
#endif

#ifndef MIN_VERSION_base
#define MIN_VERSION_base(x,y,z) 0
#endif

/* NOTE `ghc-7.10` introduced `MIN_VERSION_GLASGOW_HASKELL`. */

#define HAVE_APPLICATIVE_MONAD                  MIN_VERSION_base(4,8,0)

#define HAVE_FOLDABLE_TRAVERSABLE_IN_PRELUDE    MIN_VERSION_base(4,8,0)

#define HAVE_MONOID_IN_PRELUDE                  MIN_VERSION_base(4,8,0)

#define HAVE_NATURAL_IN_BASE                    MIN_VERSION_base(4,8,0)

#define HAVE_SEMIGROUP_IN_BASE                  MIN_VERSION_base(4,9,0)

#define HAVE_MONAD_FAIL                         MIN_VERSION_base(4,9,0)

/* #endif */




module Prelude.Spiros.Reexports

 ( module X -- re-eXports
 , module Base
#if !HAS_MONAD_FAIL
 , module Prelude.Spiros.Reexports
#endif
 )
where

#include <sboo-base-feature-macros.h>

--------------------------------------------------
--------------------------------------------------

#ifdef HAS_MONAD_FAIL
import "base" Control.Monad.Fail                     as X (MonadFail(..))
#endif







static = import ./static {};






 shell.nix
 
arguments@{...}: 

(import ./nix/shell.nix) arguments









	$(Cabal) new-install $(CabalOptions) --overwrite-policy=always -fstatic "exe:example-spiros"

	example-spiros --help

	ldd `which example-spiros`








	$(Cabal) new-run $(CabalOptions) -fstatic "example-spiros --help"

	ldd `which example-spiros`











nix-cabal-static:

	$(NixBuild)  -A "cabal.static"  "$(NixDirectory)"  --out-link ./result-cabal

	@echo -e "\n========================================\n"

	tree "./result-cabal"

	@echo -e "\n========================================\n"

	cat "./result-cabal/*.project"

	@echo -e "\n========================================\n"























--  -*- mode: cabal; buffer-read-only: nil -*-  vim:set rw: 

--------------------------------------------------
-- Projects --------------------------------------
--------------------------------------------------

packages: /home/sboo/haskell/spiros/spiros

--------------------------------------------------
-- Statically-Linked Executables
--------------------------------------------------

static: True

-- « static »
-- "Roll this and all dependent libraries into a combined .a archive. This uses GHCs -staticlib flag, which is avaiable for iOS and with GHC 8.4 and later for other platforms as well."

shared: False

-- « shared »
-- "Build shared library. This implies a separate compiler run to generate position independent code as required on most platforms."

--------------------------------------------------

profiling: False

executable-dynamic: False

-- « executable-dynamic »
-- "Link executables dynamically. The executable’s library dependencies should be built as shared objects. This implies shared: True unless shared: False is explicitly specified."

split-objs: True

executable-stripping: True

-- « executable-stripping »
-- "Use the GHC -split-objs feature when building the library. This reduces the final size of the executables that use the library by allowing them to link with only the bits that they use rather than the entire library. The downside is that building the library takes longer and uses considerably more memory."

--------------------------------------------------

flags: +static

--------------------------------------------------

package *

  ----------------------------

  ld-options:

    -fPIC

    -static
    -pthread

    -L/nix/store/03rrsz3svcl89m04hzcvqbbjrbszsb36-gmp-6.1.2-x86_64-unknown-linux-musl/lib
    -L/nix/store/azfycl51sidsd1qm9pr46zi4dwbkj9l7-glibc-2.27-x86_64-unknown-linux-musl-static/lib
    -L/nix/store/bp7gyx43lsp7yxdwf5ghikzhd9dq6m72-zlib-1.2.11-x86_64-unknown-linux-musl-static/lib

  ----------------------------

  cc-options:

    -fPIC

  ----------------------------

  ghc-options:

    -fPIC

  ----------------------------

-- ^ the « package * » stanza applies to all packages,
-- both local (internal / project) packages
-- and rempte (external / dependency) packages

--------------------------------------------------
-- Settings --------------------------------------
--------------------------------------------------

-- nix: False

verbose: 2
         -- « 1 » by default.

jobs: 4
      -- « $ncpus » by default.

--------------------------------------------------

deterministic: True
relocatable:   True

--------------------------------------------------

tests: False

--------------------------------------------------
-- Compiler --------------------------------------
--------------------------------------------------

with-compiler: /home/sboo/.nix-profile/bin/ghc-8.6.3

--------------------------------------------------
-- Repositories ----------------------------------
-------------------------------------------------

repository stackage-lts-13.7
  url: https://www.stackage.org/lts-13.7

--------------------------------------------------
-- Notes -----------------------------------------
--------------------------------------------------
-- 
-- 
-- 
--------------------------------------------------



















##################################################
{ systemPackages
, haskellPackages
, haskellUtilities

, static
}:

##################################################
let
#------------------------------------------------#

staticLibraries = {

  gmp   = systemPackages.gmp6.override { withStatic = true; };

  glibc = systemPackages.glibc.static;

  zlib  = systemPackages.zlib.static;

};

#------------------------------------------------#

newAttributes =

 // (lib.optionalAttrs (static != null)
          {
            enableStaticLibraries = static;
            
            enableSharedExecutables = (! static);
            enableSharedLibraries   = (! static);
          }
   ) ;

#------------------------------------------------#

configureFlags =

    -optl=-L${staticLibraries.gmp}/lib
    -optl=-L${staticLibraries.glibc}/lib
    -optl=-L${staticLibraries.zlib}/lib

#------------------------------------------------#
in
##################################################
oldAttributes: {

  # extraLibraries = oldDerivation.extraLibraries ++ (with static; [ gmp zlib ]);

  # extraLibraries = oldDerivation.extraLibraries ++ (with systemPackages; [ fltk ]);

}
##################################################
























instance Show ParseError where

  -- | @show \@'ParseError' ≡ 'displayParseError'@

  showsPrec precedence = showParen (precedence >= 11) (displayed ++)
    where

    displayed = (displayParseErrorWith (def :: ParseErrorConfig))

  -- | @show \@'ParseError' ≡ 'displayParseError'@

  show = displayParseErrorWith (def :: ParseErrorConfig)
























  ("Prelude.Spiros.Utilities Prelude.Spiros.Print Prelude.Spiros.Parse"
   ++ ""
  )



















##################################################
{ ...
}:

##################################################
rec {

  verbose = 2;
  jobs    = 4;

  nix           = false;
  deterministic = true;
  relocatable   = true;
  strip         = true;

  test          = false;
  benchmark     = false;
  documentation = false;

  lts      = "13.7";
  # ^ Stackage LTS version.

  compiler = ~/.nix-profile/bin/ghc-8.6.3;
  # ^ GHC executable path.
  # * should work with the stackage snapshot (i.e. « config.lts »).
  # * must be built with « -fPIC » (i.e. the « ghc » itself).

  libraries = { pkgs }: with pkgs; [

  ];

}
##################################################




















#------------------------------------------------#

toCabalFor = type:

  if   type == "bool"
  then self.bool

  else

  if   type == "int"
  then self.int

  else

  if   type == "list"
  then self.list

  else

  if   type == "path"
  then self.path

  else

  if   type == "string"
  then self.string

  else null;


















whenM :: (Monad m) => m Bool -> m () -> m ()
whenM check action = do

  b <- check

  if   b
  then action
  else nothing





































https://github.com/commercialhaskell/stack/releases/download/v1.9.3/stack-1.9.3-linux-x86_64-static.tar.gz

$(nix-build --no-out-link -A stack2nix-script) ./stack
$(nix-build --no-out-link -A build-script)































#------------------------------------------------#
# Nix -------------------------------------------#
#------------------------------------------------#

static-nix:

	 NIX_PATH="'nixpkgs=https://github.com/NixOS/nixpkgs/archive/88ae8f7d.tar.gz" nix-build --no-link "./static/default.nix" -A "spiros.example-spiros"

	 NIX_PATH=nixpkgs=https://github.com/NixOS/nixpkgs/archive/88ae8f7d.tar.gz nix-build --no-link "survey/default.nix" -A "haskellPackages.example-spiros"

	$(Cabal) new-build -fstatic "exe:example-spiros"

# « https://github.com/nh2/static-haskell-nix#readme »

.PHONY: static-nix




























TODO port to:

haskellUtilities.doStrip
haskellUtilities.justStaticExecutables







/* link executables statically against haskell libs to reduce
     closure size
   */

  justStaticExecutables = drv: overrideCabal drv 

(drv: {
    enableSharedExecutables = false;
    enableLibraryProfiling = false;
    isLibrary = false;
    doHaddock = false;
    postFixup = "rm -rf $out/lib $out/nix-support $out/share/doc";
  });





/* appendConfigureFlag adds a single argument that will be passed to the
     cabal configure command, after the arguments that have been defined
     in the initial declaration or previous overrides.
     Example:
         > haskell.lib.appendConfigureFlag haskellPackages.servant "--profiling-detail=all-functions"
   */

  appendConfigureFlags = drv: xs: overrideCabal drv (drv: { configureFlags = (drv.configureFlags or []) ++ xs; });










flags = { inherit doStrip isRelease; };

package = import ./spiros.nix flags systemPackages;

drv = haskellPackages.callPackage package {};










application :: ApplicationInformation
application = ApplicationInformation{..}
  where

  name                  = "My Application"
  license               = "Apache-2.0"

#ifdef CURRENT_PACKAGE_VERSION
  version               = "#CURRENT_PACKAGE_VERSION"
#else
  version               = "0.3"
#endif

  executable            = "my-application"
  interface             = ApplicationCLI
  platforms             = allDesktopPlatforms

  posixSubDirectory     = "myapplication/"
  windowsSubDirectory   = "sboosali/My Application/"
  macintoshSubDirectory = "io.sboosali.My-Application/"


















-- | Required fields are @""@. Optional fields are @Nothing@.

defaultApplicationInformation :: ApplicationInformation0
defaultApplicationInformation = ApplicationInformation0{..}

 name0       = def
 version0    = def
 license0    = def
 vendor0     = def

 executable0         = def
 interface0          = def
 platforms0          = def
 posixDirectory0     = def
 windowsDirectory0   = def
 macintoshDirectory0 = def

















application :: ApplicationInformation
application = defaultApplicationInformation application0

--------------------------------------------------

application0 :: ApplicationInformation0
application0 = def{ name0, license0, version0, executable0, interface0, platforms0 }
  where

  name0                  = "My Application"
  license0               = "Apache-2.0"

#ifdef CURRENT_PACKAGE_VERSION
  version0               = "CURRENT_PACKAGE_VERSION()"
#else
  version0               = "0.3"
#endif

  executable0            = Just "my-application"
  interface0             = Just ApplicationCLI
  platforms0             = Just allDesktopPlatforms

  -- posixSubDirectory     = "myapplication/"
  -- windowsSubDirectory   = "sboosali/My Application/"
  -- macintoshSubDirectory = "io.sboosali.My-Application/"


















#------------------------------------------------#

example-spiros:

	$(CabalBuild) $(CabalOptions) "-fexamples" "exe:example-spiros"

	$(Cabal) new-exec $(CabalOptions) -- example-spiros --version

	$(Cabal) new-install $(CabalOptions) "-fexamples" "exe:example-spiros" "--overwrite-policy=always"

	ldd `which example-spiros`

#	cabal new-exec --project-file ./cabal.project -- ldd `which example-spiros`

.PHONY: example-spiros











example-spiros:

	@printf "\n%s\n" ========================================

	LC_ALL=C.UTF-8 $(Cabal) new-build $(CabalOptions) "-fexamples" "exe:example-spiros" -- --version

	@printf "\n%s\n" ========================================

	$(Cabal) new-install $(CabalOptions) "-fexamples" "exe:example-spiros" "--overwrite-policy=always"

	@printf "\n%s\n" ========================================
















--------------------------------------------------
-- Macros ----------------------------------------
--------------------------------------------------

#ifdef CURRENT_PACKAGE_VERSION
#ifndef SBOO_VERSION_STRING_EQUALS_CURRENT_PACKAGE_VERSION
#define SBOO_VERSION_STRING_EQUALS_CURRENT_PACKAGE_VERSION versionString = CURRENT_PACKAGE_VERSION
#endif
#endif



















#------------------------------------------------#
# Uploading -------------------------------------#
#------------------------------------------------#

upload-spiros:

	$(Cabal) upload --username=sboo --password-command='pass "hackage.haskell.org/user/sboo"' ./dist-newstyle/sdist/spiros-*.tar.gz

.PHONY: upload-spiros





















#------------------------------------------------#
# Release ---------------------------------------#
#------------------------------------------------#

static: static-nix

.PHONY: static

#------------------------------------------------#

upload: release/spiros.tar.gz

	$(Cabal) upload --publish "./release/spiros.tar.gz"

.PHONY: upload

#------------------------------------------------#

release/spiros.tar.gz: sdist

	cp "./dist-newstyle/sdist/spiros-$(Version).tar.gz" "./release/spiros.tar.gz"









#------------------------------------------------#
# Release ---------------------------------------#
#------------------------------------------------#

static: static-nix

.PHONY: static

#------------------------------------------------#

upload: release/spiros-$(Version).tar.gz

	$(Cabal) upload "./release/spiros-$(Version).tar.gz" --publish

.PHONY: upload

#------------------------------------------------#

release/spiros-$(Version).tar.gz: sdist

	cp "./dist-newstyle/sdist/spiros-$(Version).tar.gz" "./release/spiros-$(Version).tar.gz"












#------------------------------------------------#
# Release ---------------------------------------#
#------------------------------------------------#

release: release/spiros-$(Version).tar.gz static--example-spiros

	@find ./release

.PHONY: release

#------------------------------------------------#

release/bin/example-spiros: sdist

	mkdir -p "./release/bin"
	cp "./result-static/bin/example-spiros" 

#------------------------------------------------#

release/spiros-$(Version).tar.gz: sdist

	mkdir -p "./release"
	cp "./dist-newstyle/sdist/spiros-$(Version).tar.gz" 

#------------------------------------------------#

static: static-nix

.PHONY: static

#------------------------------------------------#

upload: release/spiros-$(Version).tar.gz

	$(Cabal) upload  --publish

.PHONY: upload

#------------------------------------------------#
# EOF -------------------------------------------#
#------------------------------------------------#











































































































##################################################
{
  inherit pkgs;
  inherit stack2nix-script;
  inherit static_stack;
  inherit build-script;
}
##################################################




















{ nixpkgs ? (import <nixpkgs> {}).pkgsMusl, compiler ? "ghc843", strip ? true }:


let

  pkgs = nixpkgs.pkgsMusl;

  example-scotty-app = { mkDerivation, base, scotty, stdenv }:
      mkDerivation {
        pname = "example-scotty-app";
        version = "0.1.0.0";
        src = pkgs.lib.sourceByRegex ./. [
          ".*\.cabal$"
          "^Setup.hs$"
          "^Main.hs$"
        ];
        isLibrary = false;
        isExecutable = true;
        enableSharedExecutables = false;
        enableSharedLibraries = false;
        executableHaskellDepends = [ base scotty ];
        license = stdenv.lib.licenses.bsd3;
        configureFlags = [
          "--ghc-option=-optl=-static"
          "--extra-lib-dirs=${pkgs.gmp6.override { withStatic = true; }}/lib"
          "--extra-lib-dirs=${pkgs.zlib.static}/lib"
        ] ++ pkgs.lib.optionals (!strip) [
          "--disable-executable-stripping"
        ] ;
      };

  normalHaskellPackages = pkgs.haskell.packages.${compiler};

  haskellPackages = with pkgs.haskell.lib; normalHaskellPackages.override {
    overrides = self: super: {
      # Dependencies we need to patch
      hpc-coveralls = appendPatch super.hpc-coveralls (builtins.fetchurl https://github.com/guillaume-nargeot/hpc-coveralls/pull/73/commits/344217f513b7adfb9037f73026f5d928be98d07f.patch);
    };
  };

  drv = haskellPackages.callPackage example-scotty-app {};

in
  if pkgs.lib.inNixShell then drv.env else drv



























##################################################

# Builds a static `stack` executable from a stack source dir.
#
# Usage:
#
#   $(nix-build --no-out-link -A stack2nix-script) /path/to/stack/source --stack-yaml stack-nightly.yaml && nix-build --no-out-link -A static_stack
#
# We do it this way instead of writing a derivation that
# does that for you because as of writing, `stack2nix` doesn't support
# being run from within a nix build, because it calls `cabal update`.

##################################################
let
#------------------------------------------------#

haskellUtilities = haskell.lib;

#------------------------------------------------#

  pyopenssl-fix-test-buffer-size-overlay = final: previous: {
    python36 = previous.python36.override {
      packageOverrides = self: super: {
        cython = super.cython.overridePythonAttrs (old: rec {
          # TODO Cython tests for unknown reason hang with musl. Remove when that's fixed.
          # See https://github.com/nh2/static-haskell-nix/issues/6#issuecomment-421852854
          doCheck = false;
        });
        pyopenssl = super.pyopenssl.overridePythonAttrs (old: rec {
          patches = [
            # TODO Remove when https://github.com/pyca/pyopenssl/commit/b2777a465b669fb647dbac0a92919cb05458707b is available in nixpkgs
            (final.fetchpatch {
              name = "wantWriteError-test-buffer-size.patch";
              url = "https://github.com/pyca/pyopenssl/commit/b2777a465b669fb647dbac0a92919cb05458707b.patch";
              sha256 = "0igksnl0cd5cx8f38bfjdriwdrzbw6ciy0hs805s84mprfwhck8d";
            })
          ];
        });
      };
    };
  };

  normalPkgs = import (fetchTarball https://github.com/NixOS/nixpkgs/archive/88ae8f7d55efa457c95187011eb410d097108445.tar.gz) {};

  # In `survey` we provide a nixpkgs set with some fixes; import it here.
  pkgs = (import survey {
    inherit normalPkgs;
    overlays = [ pyopenssl-fix-test-buffer-size-overlay ];
  }).pkgs;

  # TODO Use `pkgs.stack2nix` instead of this once `stack2nix` 0.2 is in `pkgs`
  stack2nix_src = pkgs.fetchFromGitHub {
    owner = "input-output-hk";
    repo = "stack2nix";
    rev = "v0.2.1";
    sha256 = "1ihcp3mr0s89xmc81f9hxq07jw6pm3lixr5bdamqiin1skpk8q3b";
  };
  stack2nix = import (stack2nix_src + "/default.nix") {};

  # Script that runs `stack2nix` on a given stack source dir.
  # Arguments given to the script are given to `stack2nix`.
  # Running the script creates file `stack.nix`.
  stack2nix-script =
    # `stack2nix` requires `cabal` on $PATH.
    # We put our nixpkgs's version of `nix` on $PATH for reproducibility.
    pkgs.writeScript "stack2nix-build-script.sh" ''
      #!/usr/bin/env bash
      set -eu -o pipefail
      PATH=${pkgs.cabal-install}/bin:${normalPkgs.nix}/bin:$PATH ${stack2nix}/bin/stack2nix -o stack.nix $@
    '';

  enableCabalFlags = flags: drv: builtins.foldl' (d: flag: pkgs.haskell.lib.enableCabalFlag d flag) drv flags;
  setStackFlags = drv:
    if release
      then enableCabalFlags [ "hide-dependency-versions" "supported-build" ] drv
      else drv;
  # Builds a static stack executable from a `stack.nix` file generated
  # with `stack2nix`.
  static_stack = setStackFlags (import survey {
    normalPkgs = pkgs;
    normalHaskellPackages = import stack2nix-output {
      inherit pkgs;
    };
  }).haskellPackages.stack;

  # Script that runs `nix-build` to build the final executable.
  # We do this to fix the version of `nix` to the one in our nixpkgs
  # for reproducibility, as changing nix versions can change the build env.
  # Arguments given to the script are given to `nix-build`.
  build-script =
    pkgs.writeScript "stack-build-script.sh" ''
      #!/usr/bin/env bash
      set -eu -o pipefail
      set -x
      ${normalPkgs.nix}/bin/nix-build --no-out-link -A static_stack $@
    '';

#------------------------------------------------#
in
##################################################
let
#------------------------------------------------#

spiros = rec {

  spiros         = null;
  example-spiros = haskellUtilities.justStaticExecutables spiros;

};

#------------------------------------------------#
in
##################################################
{

  inherit pkgs;
  inherit spiros;

}
##################################################





































{ mkDerivation, lib

, base, bytestring, case-insensitive, containers
, cpuinfo, data-default-class, deepseq, directory
, exceptions, generic-deriving, hashable, mtl, optparse-applicative
, prettyprinter, process, safe, semigroups, show-prettyprint, split
, stdenv, stm, string-conv, template-haskell, text, time
, transformers, unordered-containers, vector, vinyl

, gmp6, zlib, libffi
}:

mkDerivation {

  pname   = "example-spiros";
  version = "0.3.2";
  src     = ../spiros;

  configureFlags = [
   "-fstatic"
    "--ghc-option=-optl=-static"
    "--extra-lib-dirs=${gmp6}/lib"
    "--extra-lib-dirs=${zlib}/lib"
    "--extra-lib-dirs=${libffi}/lib"
  ] ++ lib.optionals (!strip) [
    "--disable-executable-stripping"
  ];

  isLibrary    = false;
  isExecutable = true;

  enableSharedExecutables = false;
  enableSharedLibraries   = false;

  executableHaskellDepends    = [
    base bytestring case-insensitive containers cpuinfo
    data-default-class deepseq directory exceptions generic-deriving
    hashable mtl prettyprinter process safe semigroups show-prettyprint
    split stm string-conv template-haskell text time transformers
    unordered-containers vector vinyl optparse-applicative 
  ];

  homepage    = "https://github.com/sboosali/spiros#readme";
  description = "Custom Prelude (sboo / sboosali)";
  license     = stdenv.lib.licenses.asl20;
}















##################################################
rec {

  spiros         = haskellUtilities.shellAware drv
  example-spiros = haskellUtilities.justStaticExecutables spiros;

}
##################################################
























































































































































