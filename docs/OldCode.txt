{ nixpkgs  ? <nixpkgs>
, overlays ? []
, config   ? {}

           # ^ (these options (above) affect only « pkgs » (below).)

, musl     ? false
           # ^ if true, « musl » as the C Library (via « nixpkgs.pkgsMusl »).
           #   if false, « glibc » as the C Library (via « nixpkgs.pkgs »).

, pkgs     ? ( let ps = (import nixpkgs { inherit overlays config; });
               in if   musl
                  then ps.pkgs
                  else ps.pkgsMusl
             )

           # ^ 

, compiler ? "ghc863"

           # ^ the haskell compiler. GHC 8.6.3 (by default).

, test     ? false
, bench    ? false
, docs     ? false

           # ^ build the « test:_ » and/or « benchmark:_ » components,
           #   and/or build Haddocks.

, strip    ? true

           # ^ enable "executable stripping".

... }:







/* #if !defined(HS_BASE_FEATURE_MACROS_H) */
/* #define HS_BASE_FEATURE_MACROS_H       */

/* #if !defined(MIN_VERSION_base) */
/* #error MIN_VERSION_base macro not defined */
/* #endif */

#ifndef MIN_VERSION_GLASGOW_HASKELL
#define MIN_VERSION_GLASGOW_HASKELL(x,y,z1,z2) 0
#endif

#ifndef MIN_VERSION_base
#define MIN_VERSION_base(x,y,z) 0
#endif

/* NOTE `ghc-7.10` introduced `MIN_VERSION_GLASGOW_HASKELL`. */

#define HAVE_APPLICATIVE_MONAD                  MIN_VERSION_base(4,8,0)

#define HAVE_FOLDABLE_TRAVERSABLE_IN_PRELUDE    MIN_VERSION_base(4,8,0)

#define HAVE_MONOID_IN_PRELUDE                  MIN_VERSION_base(4,8,0)

#define HAVE_NATURAL_IN_BASE                    MIN_VERSION_base(4,8,0)

#define HAVE_SEMIGROUP_IN_BASE                  MIN_VERSION_base(4,9,0)

#define HAVE_MONAD_FAIL                         MIN_VERSION_base(4,9,0)

/* #endif */




module Prelude.Spiros.Reexports

 ( module X -- re-eXports
 , module Base
#if !HAS_MONAD_FAIL
 , module Prelude.Spiros.Reexports
#endif
 )
where

#include <sboo-base-feature-macros.h>

--------------------------------------------------
--------------------------------------------------

#ifdef HAS_MONAD_FAIL
import "base" Control.Monad.Fail                     as X (MonadFail(..))
#endif







static = import ./static {};






 shell.nix
 
arguments@{...}: 

(import ./nix/shell.nix) arguments









